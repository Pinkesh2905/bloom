# Generated by Django 5.2 on 2025-09-21 08:09

import datetime
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Affirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('category', models.CharField(default='general', max_length=50)),
                ('target_emotion', models.JSONField(blank=True, default=list)),
                ('rating', models.FloatField(default=0.0)),
                ('times_shown', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-rating', 'times_shown'],
            },
        ),
        migrations.CreateModel(
            name='BotPersonality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_default', models.BooleanField(default=False)),
                ('greeting_morning', models.CharField(default='Good morning, {name}! Ready to start the day with a positive mindset?', max_length=255)),
                ('greeting_afternoon', models.CharField(default="Good afternoon, {name}! Hope you're having a wonderful day.", max_length=255)),
                ('greeting_evening', models.CharField(default='Good evening, {name}. Time to relax and reflect.', max_length=255)),
                ('positive_response', models.CharField(default="That's wonderful to hear, {name}! I'm so happy for you.", max_length=255)),
                ('neutral_response', models.CharField(default='I understand. Thanks for sharing that with me, {name}.', max_length=255)),
                ('supportive_response', models.CharField(default="I'm here for you, {name}. Remember to be kind to yourself.", max_length=255)),
                ('empathetic_response', models.CharField(default="It sounds like you're going through a lot, {name}. I'm here to listen.", max_length=255)),
                ('farewell_message', models.CharField(default="Take care, {name}. Remember I'm here whenever you need me.", max_length=255)),
                ('breathing_exercise_prompt', models.TextField(default="It sounds like a moment of calm could be helpful. Let's try a simple breathing exercise. Just breathe in for 4 seconds, hold for 4, and breathe out for 6. Let's do a few rounds together.")),
                ('gratitude_prompt', models.TextField(default="That's a great idea. What is one small thing you're grateful for today, {name}?")),
                ('crisis_response', models.TextField(default="It sounds like you are in a lot of pain, {name}. It's important to talk to someone who can help right now. You are not alone. Please reach out to one of these resources:\n{resources}")),
                ('empathy_level', models.FloatField(default=0.8)),
                ('humor_level', models.FloatField(default=0.5)),
                ('formality_level', models.FloatField(default=0.3)),
                ('proactivity_level', models.FloatField(default=0.6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ConversationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('template_type', models.CharField(choices=[('crisis', 'Crisis Intervention'), ('check_in', 'Daily Check-in'), ('goal_setting', 'Goal Setting'), ('coping', 'Coping Strategies'), ('celebration', 'Achievement Celebration'), ('reflection', 'Reflection Exercise')], max_length=20)),
                ('trigger_keywords', models.JSONField(default=list)),
                ('conversation_flow', models.JSONField(default=list)),
                ('personalization_fields', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('usage_count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='CrisisResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('phone_number', models.CharField(max_length=20)),
                ('website', models.URLField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('country', models.CharField(default='US', max_length=50)),
                ('availability', models.CharField(default='24/7', max_length=100)),
                ('specialization', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('priority_order', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['priority_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Joke',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('category', models.CharField(default='general', max_length=50)),
                ('appropriateness_level', models.CharField(choices=[('family', 'Family Friendly'), ('adult', 'Adult'), ('dark', 'Dark Humor')], default='family', max_length=20)),
                ('rating', models.FloatField(default=0.0)),
                ('times_shown', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-rating', 'times_shown'],
            },
        ),
        migrations.CreateModel(
            name='MotivationalQuote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('author', models.CharField(blank=True, max_length=100)),
                ('category', models.CharField(default='general', max_length=50)),
                ('mood_context', models.JSONField(blank=True, default=list)),
                ('rating', models.FloatField(default=0.0)),
                ('times_shown', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-rating', 'times_shown'],
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='üèÜ', max_length=10)),
                ('achievement_type', models.CharField(choices=[('streak', 'Check-in Streak'), ('conversation', 'Conversation Milestone'), ('gratitude', 'Gratitude Practice'), ('engagement', 'User Engagement'), ('wellness', 'Wellness Milestone'), ('social', 'Social Connection'), ('mindfulness', 'Mindfulness Practice')], max_length=20)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('requirement_value', models.IntegerField(default=0)),
                ('requirement_string', models.CharField(blank=True, max_length=100, null=True)),
                ('points', models.IntegerField(default=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('prerequisite', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='chatbot.achievement')),
            ],
        ),
        migrations.CreateModel(
            name='ConversationSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('title', models.CharField(blank=True, max_length=100)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('message_count', models.IntegerField(default=0)),
                ('avg_response_time', models.FloatField(default=0.0)),
                ('sentiment_score', models.FloatField(default=0.0)),
                ('topics_discussed', models.JSONField(blank=True, default=list)),
                ('crisis_flags', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatbot_sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sender', models.CharField(choices=[('user', 'User'), ('bot', 'Bot')], max_length=10)),
                ('message', models.TextField()),
                ('message_type', models.CharField(choices=[('general', 'General Chat'), ('mood_check', 'Mood Check-in'), ('breathing', 'Breathing Exercise'), ('motivation', 'Motivation'), ('joke', 'Humor'), ('gratitude', 'Gratitude'), ('therapy', 'Mini Therapy'), ('crisis', 'Crisis Support'), ('goal_checkin', 'Goal Check-in'), ('reflection', 'Reflection'), ('coping_strategy', 'Coping Strategy'), ('mindfulness', 'Mindfulness')], default='general', max_length=20)),
                ('sentiment', models.CharField(choices=[('very_negative', 'Very Negative'), ('negative', 'Negative'), ('neutral', 'Neutral'), ('positive', 'Positive'), ('very_positive', 'Very Positive')], default='neutral', max_length=20)),
                ('confidence_score', models.FloatField(default=0.0)),
                ('keywords_extracted', models.JSONField(blank=True, default=list)),
                ('emotion_detected', models.JSONField(blank=True, default=dict)),
                ('response_time', models.FloatField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatbot_messages', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chatbot.conversationsession')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='CopingStrategy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('instructions', models.TextField()),
                ('category', models.CharField(choices=[('breathing', 'Breathing Exercises'), ('mindfulness', 'Mindfulness'), ('physical', 'Physical Activity'), ('social', 'Social Support'), ('cognitive', 'Cognitive Techniques'), ('creative', 'Creative Expression'), ('relaxation', 'Relaxation Techniques')], max_length=20)),
                ('effectiveness_rating', models.FloatField(default=0.0)),
                ('times_used', models.IntegerField(default=0)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coping_strategies', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmotionPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emotion', models.CharField(max_length=50)),
                ('intensity', models.FloatField()),
                ('context', models.TextField(blank=True)),
                ('triggers', models.JSONField(default=list)),
                ('outcome_rating', models.IntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('coping_used', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='chatbot.copingstrategy')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emotion_patterns', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('feedback_text', models.TextField(blank=True)),
                ('improvement_suggestion', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chatbot.chatmessage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_name', models.CharField(default='Friend', max_length=50)),
                ('mood_tracking_enabled', models.BooleanField(default=True)),
                ('daily_check_in_streak', models.IntegerField(default=0)),
                ('longest_streak', models.IntegerField(default=0)),
                ('total_conversations', models.IntegerField(default=0)),
                ('total_messages_sent', models.IntegerField(default=0)),
                ('favorite_activities', models.JSONField(blank=True, default=list)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('last_check_in_date', models.DateField(blank=True, null=True)),
                ('wellness_score', models.FloatField(default=0.0)),
                ('privacy_settings', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bot_personality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='chatbot.botpersonality')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WellnessGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('goal_type', models.CharField(choices=[('mood', 'Mood Improvement'), ('habits', 'Healthy Habits'), ('social', 'Social Connection'), ('mindfulness', 'Mindfulness Practice'), ('exercise', 'Physical Activity'), ('sleep', 'Sleep Quality'), ('custom', 'Custom Goal')], default='custom', max_length=20)),
                ('target_value', models.IntegerField(blank=True, null=True)),
                ('current_progress', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('paused', 'Paused'), ('archived', 'Archived')], default='active', max_length=20)),
                ('target_date', models.DateField(blank=True, null=True)),
                ('reminder_frequency', models.CharField(default='weekly', max_length=20)),
                ('last_reminder_sent', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatbot_goals', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MoodEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mood', models.CharField(choices=[('terrible', 'Terrible'), ('bad', 'Bad'), ('okay', 'Okay'), ('good', 'Good'), ('great', 'Great'), ('amazing', 'Amazing')], max_length=20)),
                ('energy_level', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=3)),
                ('stress_level', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=3)),
                ('sleep_hours', models.FloatField(blank=True, help_text='Hours of sleep last night', null=True)),
                ('physical_activity', models.BooleanField(default=False, help_text='Did physical activity today')),
                ('social_interaction', models.BooleanField(default=False, help_text='Had meaningful social interaction')),
                ('gratitude_note', models.TextField(blank=True, max_length=500, null=True)),
                ('mood_triggers', models.JSONField(blank=True, default=list, help_text='What triggered this mood')),
                ('date', models.DateField(default=datetime.date.today)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatbot_mood_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('progress_value', models.FloatField(default=0.0)),
                ('is_new', models.BooleanField(default=True)),
                ('celebration_shown', models.BooleanField(default=False)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chatbot.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chatbot_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
