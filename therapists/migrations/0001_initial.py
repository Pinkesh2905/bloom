# Generated by Django 5.2 on 2025-09-11 05:33

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('duration', models.IntegerField(default=60, help_text='Duration in minutes')),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('session_type', models.CharField(choices=[('VIDEO', 'Video Session'), ('CHAT', 'Chat Session'), ('PHONE', 'Phone Session'), ('IN_PERSON', 'In-Person Session')], default='VIDEO', max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Confirmation'), ('CONFIRMED', 'Confirmed'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED_BY_PATIENT', 'Cancelled by Patient'), ('CANCELLED_BY_THERAPIST', 'Cancelled by Therapist'), ('NO_SHOW_PATIENT', 'Patient No-Show'), ('NO_SHOW_THERAPIST', 'Therapist No-Show'), ('RESCHEDULED', 'Rescheduled')], default='PENDING', max_length=30)),
                ('patient_notes', models.TextField(blank=True, help_text='Notes from patient')),
                ('therapist_notes', models.TextField(blank=True, help_text='Private therapist notes')),
                ('session_summary', models.TextField(blank=True, help_text='Session summary')),
                ('session_link', models.URLField(blank=True, help_text='Video session link')),
                ('session_room_id', models.CharField(blank=True, max_length=100)),
                ('recording_consent', models.BooleanField(default=False)),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('payment_status', models.CharField(default='PENDING', max_length=20)),
                ('payment_method', models.CharField(blank=True, max_length=50)),
                ('cancellation_reason', models.CharField(blank=True, choices=[('EMERGENCY', 'Emergency'), ('ILLNESS', 'Illness'), ('SCHEDULE_CONFLICT', 'Schedule Conflict'), ('PERSONAL', 'Personal Reasons'), ('TECHNICAL', 'Technical Issues'), ('OTHER', 'Other')], max_length=20)),
                ('cancellation_details', models.TextField(blank=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('reminder_sent', models.BooleanField(default=False)),
                ('confirmation_sent', models.BooleanField(default=False)),
                ('follow_up_sent', models.BooleanField(default=False)),
                ('cancelled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cancelled_appointments', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patient_appointments', to=settings.AUTH_USER_MODEL)),
                ('rescheduled_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rescheduled_appointments', to='therapists.appointment')),
            ],
            options={
                'db_table': 'appointments',
                'ordering': ['-date', '-time'],
            },
        ),
        migrations.CreateModel(
            name='AppointmentMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('is_system_message', models.BooleanField(default=False)),
                ('is_urgent', models.BooleanField(default=False)),
                ('is_read', models.BooleanField(default=False)),
                ('ai_generated', models.BooleanField(default=False, help_text='Message generated by AI assistant')),
                ('ai_confidence', models.DecimalField(blank=True, decimal_places=3, max_digits=4, null=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='appointment_attachments/')),
                ('attachment_type', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='therapists.appointment')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_appointment_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'appointment_messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='PatientProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20)),
                ('insurance_provider', models.CharField(blank=True, max_length=100)),
                ('insurance_id', models.CharField(blank=True, max_length=50)),
                ('medical_conditions', models.TextField(blank=True, help_text='Current medical conditions')),
                ('medications', models.TextField(blank=True, help_text='Current medications')),
                ('preferred_therapist_gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('N', 'Non-binary'), ('ANY', 'No preference')], max_length=20)),
                ('preferred_session_type', models.CharField(blank=True, choices=[('VIDEO', 'Video Session'), ('CHAT', 'Chat Session'), ('PHONE', 'Phone Session'), ('IN_PERSON', 'In-Person Session')], max_length=20)),
                ('therapy_goals', models.TextField(blank=True, help_text='What you hope to achieve')),
                ('notifications_enabled', models.BooleanField(default=True)),
                ('email_reminders', models.BooleanField(default=True)),
                ('sms_reminders', models.BooleanField(default=False)),
                ('profile_visibility', models.CharField(choices=[('PRIVATE', 'Private'), ('THERAPISTS_ONLY', 'Therapists Only'), ('PUBLIC', 'Public')], default='THERAPISTS_ONLY', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patient_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'patient_profiles',
            },
        ),
        migrations.CreateModel(
            name='TherapistProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_number', models.CharField(help_text='Professional license number', max_length=50)),
                ('specializations', models.JSONField(default=list, help_text='List of specializations')),
                ('qualifications', models.JSONField(default=list, help_text='Educational qualifications')),
                ('languages_spoken', models.JSONField(default=list, help_text='Languages spoken')),
                ('bio', models.TextField(help_text='Professional biography (max 1000 characters)', max_length=1000)),
                ('years_experience', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)])),
                ('profile_picture', models.ImageField(default='therapist_pics/default.png', upload_to='therapist_pics/')),
                ('hourly_rate', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('session_duration', models.IntegerField(default=60, help_text='Session duration in minutes')),
                ('accepts_insurance', models.BooleanField(default=False)),
                ('insurance_providers', models.JSONField(blank=True, default=list)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('office_address', models.TextField(blank=True, help_text='Office address for in-person sessions')),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('offers_video_sessions', models.BooleanField(default=True)),
                ('offers_chat_sessions', models.BooleanField(default=True)),
                ('offers_phone_sessions', models.BooleanField(default=False)),
                ('offers_in_person', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False, help_text='Email and identity verified')),
                ('is_approved', models.BooleanField(default=False, help_text='Admin approved to accept patients')),
                ('license_verified', models.BooleanField(default=False, help_text='Professional license verified')),
                ('background_check_completed', models.BooleanField(default=False)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_reviews', models.IntegerField(default=0)),
                ('total_sessions', models.IntegerField(default=0)),
                ('response_time_hours', models.IntegerField(default=24, help_text='Average response time in hours')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_active', models.DateTimeField(default=django.utils.timezone.now)),
                ('profile_complete', models.BooleanField(default=False)),
                ('onboarding_completed', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='therapist_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'therapist_profiles',
            },
        ),
        migrations.AddField(
            model_name='appointment',
            name='therapist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='therapist_appointments', to='therapists.therapistprofile'),
        ),
        migrations.CreateModel(
            name='TherapistReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_text', models.TextField(blank=True, max_length=1000)),
                ('communication_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('professionalism_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('effectiveness_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('would_recommend', models.BooleanField(default=True)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('therapist_response', models.TextField(blank=True, help_text="Therapist's response to review")),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('helpful_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='therapists.appointment')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='therapist_reviews', to=settings.AUTH_USER_MODEL)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='therapists.therapistprofile')),
            ],
            options={
                'db_table': 'therapist_reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TherapistSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('break_start', models.TimeField(blank=True, help_text='Break start time', null=True)),
                ('break_end', models.TimeField(blank=True, help_text='Break end time', null=True)),
                ('therapist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='therapists.therapistprofile')),
            ],
            options={
                'ordering': ['day_of_week', 'start_time'],
            },
        ),
        migrations.AddIndex(
            model_name='therapistprofile',
            index=models.Index(fields=['is_approved', 'is_verified'], name='therapist_p_is_appr_fc2f6a_idx'),
        ),
        migrations.AddIndex(
            model_name='therapistprofile',
            index=models.Index(fields=['rating'], name='therapist_p_rating_6bd4fa_idx'),
        ),
        migrations.AddIndex(
            model_name='therapistprofile',
            index=models.Index(fields=['hourly_rate'], name='therapist_p_hourly__d6eed3_idx'),
        ),
        migrations.AddIndex(
            model_name='therapistprofile',
            index=models.Index(fields=['created_at'], name='therapist_p_created_381acd_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['patient', 'status'], name='appointment_patient_6fe260_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['therapist', 'status'], name='appointment_therapi_27746d_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['date', 'time'], name='appointment_date_c89b47_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['status'], name='appointment_status_9fecd6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='therapistreview',
            unique_together={('patient', 'appointment')},
        ),
        migrations.AlterUniqueTogether(
            name='therapistschedule',
            unique_together={('therapist', 'day_of_week', 'start_time')},
        ),
    ]
